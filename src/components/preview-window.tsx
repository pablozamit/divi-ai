'use client';
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Copy, Check } from "lucide-react";
import { ScrollArea } from './ui/scroll-area';
import { Switch } from './ui/switch';
import { Label } from './ui/label';
import { Button } from './ui/button';
import { useToast } from '@/hooks/use-toast';

interface PreviewWindowProps {
  generatedCode: string;
  isLoading: boolean;
  error: string | null;
}

export default function PreviewWindow({ generatedCode, isLoading, error }: PreviewWindowProps) {
  const [showPreview, setShowPreview] = useState(true);
  const [hasCopied, setHasCopied] = useState(false);
  const { toast } = useToast();

  const handleCopy = () => {
    if(!generatedCode) return;
    navigator.clipboard.writeText(generatedCode);
    setHasCopied(true);
    toast({
        title: "Copied to clipboard!",
        description: "The Divi layout code has been copied.",
    });
    setTimeout(() => setHasCopied(false), 2000);
  };

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="space-y-4 p-4">
          <Skeleton className="h-8 w-1/4" />
          <Skeleton className="h-4 w-1/2" />
          <Skeleton className="h-32 w-full" />
          <Skeleton className="h-4 w-3/4" />
        </div>
      );
    }

    if (error) {
      return (
        <Alert variant="destructive" className="m-4">
          <Terminal className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      );
    }
    
    if (!generatedCode) {
      return (
        <div className="text-center text-muted-foreground py-16">
          <h3 className="text-lg font-semibold font-headline">Ready to Weave Magic?</h3>
          <p className="text-sm">Your generated Divi page layout will appear here.</p>
          <p className="text-sm mt-2">Start by typing a prompt in the sidebar.</p>
        </div>
      );
    }

    if (showPreview) {
      return (
        <div className="relative">
          <Button
            variant="ghost"
            size="sm"
            onClick={handleCopy}
            className="absolute top-4 right-4 z-10"
          >
            {hasCopied ? <Check className="mr-2 h-4 w-4" /> : <Copy className="mr-2 h-4 w-4" />}
            {hasCopied ? "Copied!" : "Copy Code"}
          </Button>
          <ScrollArea className="h-[calc(100vh-14rem)]">
            <pre className="p-4 bg-muted rounded-md text-sm text-muted-foreground whitespace-pre-wrap">
              <code>{generatedCode}</code>
            </pre>
          </ScrollArea>
        </div>
      );
    }

    return (
        <div className="text-center text-muted-foreground py-16">
          <h3 className="text-lg font-semibold">Preview Hidden</h3>
          <p className="text-sm">Toggle the switch to see the generated layout.</p>
        </div>
      );
  };
  
  return (
    <Card className="h-full border-dashed shadow-none">
      <CardHeader>
        <div className="flex justify-between items-center">
            <div>
                <CardTitle className="font-headline">Generated Layout</CardTitle>
                <CardDescription>This is the Divi-compatible code generated by the AI.</CardDescription>
            </div>
            <div className="flex items-center space-x-2">
                <Switch 
                    id="preview-toggle" 
                    checked={showPreview}
                    onCheckedChange={setShowPreview}
                    disabled={!generatedCode || isLoading}
                />
                <Label htmlFor="preview-toggle">Preview</Label>
            </div>
        </div>
      </CardHeader>
      <CardContent>
        {renderContent()}
      </CardContent>
    </Card>
  );
}
